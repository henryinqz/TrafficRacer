######################################################################
# CSCB58 Summer 2022 Project
# University of Toronto, Scarborough
#
# Student Name: Henry Wong, Student Number: 1007020206, UTorID: wonghe22
#
# Bitmap Display Configuration:
# - Unit width in pixels: 	16
# - Unit height in pixels: 	16
# - Display width in pixels: 	512
# - Display height in pixels: 	512
# - Base Address for Display: 	0x10008000 ($gp)
#
# Basic features that were implemented successfully
# a) Display the number of remaining lives
#    - Shown in scoreboard as red dots
# b) Different cars moving in different speeds
#    - Cars in left lane appear to move faster than right lane (simulating relative velocity)
# c) Display a Game Over/Retry screen when car collides with an obstacle and there are no remaining lives. 
#    - Restart the game if the "Retry" option is chosen
#
# Additional features that were implemented successfully
# a) Add two types of pickups
#    - Extra hearts, invisibility
# b) Display live score (it should updated as the player progresses and reset when the car collides with an obstacle)
# c) Add a more challenging level that starts when the player completes the first level 
#    - Level two contains "banana cars" to increase difficulty
#
# Link to the video demo
# - https://www.youtube.com/watch?v=hZ7JdxFRUMI
#
# Any additional information that the TA needs to know:
# - Invincibility is indicated by flashing player car and player can drive through obstacles while active
# - Score is shown at top of screen as a progress bar
#   - Level one is indicated with a BLUE score counter
#   - Level two is indicated with a GREEN score counter. 
# - Game automatically ends after level two is completed (ie. max score is reached)
# - Controls:
#	W: Increase speed (3 speed levels)
#	A: Move left
#	S: Move right
#	D: Decrease speed
#	Q: End game
#
######################################################################
# State constants
.eqv	SPEED_LOW 		0
.eqv	SPEED_MEDIUM 		1
.eqv	SPEED_HIGH 		2
.eqv	SLEEP_LOW 		66 # ~15fps
.eqv	SLEEP_MEDIUM 		33 # ~30fps
.eqv	SLEEP_HIGH 		25 # 40fps

.eqv	LEVEL_ONE		1
.eqv	LEVEL_TWO		2
.eqv	MAX_LEVEL		2

.eqv	MAX_ROAD_STATE	 	5
.eqv	MAX_PLAYER_SCORE 	800
.eqv	MAX_PLAYER_HEARTS 	15
.eqv	MAX_PLAYER_INVIS 	150

# Display dimensions
.eqv	SCOREBOARD_WIDTH 	32
.eqv	SCOREBOARD_HEIGHT	4

.eqv	ROAD_START_X		1
.eqv 	ROAD_START_Y 		5
.eqv	ROAD_END_X		32
.eqv 	ROAD_END_Y 		32

.eqv 	DISPLAY_WIDTH		32
.eqv	DISPLAY_BYTES		4096

# Sprite dimensions
.eqv	PLAYER_WIDTH	5
.eqv	PLAYER_HEIGHT	7
.eqv	PLAYER_Y_AXIS	20 # (ROAD_END_Y-ROAD_START_Y) - PLAYER_HEIGHT
.eqv	CAR_WIDTH	3
.eqv	CAR_HEIGHT	5
.eqv	BANANA_WIDTH	8
.eqv	BANANA_HEIGHT	11
.eqv	HEART_WIDTH	5
.eqv	HEART_HEIGHT	4
.eqv	INVIS_WIDTH	4
.eqv	INVIS_HEIGHT	5

.data	
	# Display
	bufferDisplay:		.word 0:DISPLAY_BYTES
	displayAddress: 	.word 0x10008000
	displayAddressEnd: 	.word 0x10009000
	
	# Default values
	init_player_pos:	.word 17, PLAYER_Y_AXIS
	init_player_speed:	.word 0
	init_player_level:	.word LEVEL_ONE
	init_player_score:	.word 0
	init_player_hearts:	.word 4
	init_player_invis:	.word 0
	
	init_car1_pos:		.word 0, -CAR_HEIGHT
	init_car2_pos:		.word 0, -CAR_HEIGHT
	init_banana_pos:	.word 0, -BANANA_HEIGHT
	init_heart_pos:		.word 0, -HEART_HEIGHT
	init_invis_pos:		.word 0, -INVIS_HEIGHT
	
	# Player
	player_pos:		.word 17, 20
	player_speed:		.word 0
	player_level:		.word LEVEL_ONE
	player_score:		.word 0
	player_hearts:		.word 4
	player_invis: 		.word 0 # Timer

	# Obstacles/powerups
	car1_pos:		.word 0, -CAR_HEIGHT
	car2_pos:		.word 0, -CAR_HEIGHT
	banana_pos:		.word 0, -BANANA_HEIGHT
	heart_pos:		.word 0, -HEART_HEIGHT
	invis_pos:		.word 0, -INVIS_HEIGHT
	
	# States
	game_over_state: 	.word 0
	road_state: 		.word 0 # Ranges from 0-5
	
	# Assets
	game_over_screen: 	.word # 0x808080=grey, 0xffffff=white, 0xed1c23=red
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xed1c23,0xed1c23,0xed1c23,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0xed1c23,0x263238,0x263238,0xed1c23,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xed1c23,0xed1c23,0xed1c23,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xed1c23,0x263238,0xed1c23,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xed1c23,0x263238,0x263238,0xed1c23,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0xffffff,0xffffff,0xffffff,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0xffffff,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238
	
	scoreboard: 	.word # 0x808080=grey, 0xffffff=white
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238
		0x263238, 0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff,0xffffff ,0x263238 
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238
		0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238,0x263238
	score_colour: 	.word 0x3f51b5, 0x13d195 # LEVEL_ONE=dark blue, LEVEL_TWO=emerald green
	heart_colour: 	.word 0xf44236 # red
						
	road: 	   	.word # 0xe0e0e0=light grey (lines), 0x808080=medium grey (road), 0x263238=dark grey (sides), 0xffcb0e=yellow
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
	
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0x808080 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238,
		0x263238,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xffcb0e,0xffcb0e ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080, 0xe0e0e0 ,0x808080,0x808080,0x808080,0x808080,0x808080,0x808080,0x263238
						
	player_sprite: 	.word # 0x0=none, 0xf75b63=pink, 0x99d9ea=light blue, 0x000001=black
		0x0, 	  0x0, 	    0xf75b63, 0x0, 	0x0,
		0x0, 	  0xf75b63, 0xf75b63, 0xf75b63, 0x0,
		0x000001, 0xf75b63, 0x99d9ea, 0xf75b63, 0x000001,
		0x0, 	  0xf75b63, 0x99d9ea, 0xf75b63, 0x0,
		0x000001, 0xf75b63, 0xf75b63, 0xf75b63, 0x000001,
		0xf75b63, 0xf75b63, 0xf75b63, 0xf75b63, 0xf75b63,
		0x0, 	  0x0, 	    0xf75b63, 0x0, 	0x0
	
	car_down_sprite: .word # 0x0=none, 0x3f49cc=blue, 0xffcb0e=yellow
		0x3f49cc, 0x3f49cc, 0x3f49cc,
		0x3f49cc, 0x3f49cc, 0x3f49cc,
		0x3f49cc, 0x3f49cc, 0x3f49cc,
		0x3f49cc, 0x3f49cc, 0x3f49cc,
		0xffcb0e, 0x3f49cc, 0xffcb0e
	car_up_sprite:	.word # 0x0=none, 0x880014=maroon, 0xffcb0e=yellow
		0xffcb0e, 0x880014, 0xffcb0e,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014,
		0x880014, 0x880014, 0x880014
	
	banana_sprite:	.word # 0xfff200=yellow, 0xcfc532=dark yellow, 0x880014=brown, 0x000001=black
		0x0,	  0x0,	    0x0,      0x0,	0x000001, 0x0,	    0x0,	0x0,
		0x0,	  0x0,	    0x0,      0x000001, 0x880014, 0x000001, 0x0,	0x0,
		0x0,	  0x0,	    0x0,      0x0,	0x000001, 0xcfc532, 0x000001,	0x0,
		0x0,	  0x0,	    0x0,      0x0,	0x000001, 0xcfc532, 0x000001,	0x0,
		0x0,	  0x0,	    0x0,      0x0,	0x000001, 0xcfc532, 0xfff200,	0x000001,
		0x0,	  0x0,	    0x0,      0x000001, 0xcfc532, 0xfff200, 0xfff200,	0x000001,
		0x0,	  0x0,	    0x0,      0x000001, 0xcfc532, 0xfff200, 0x000001,	0x0,
		0x0,	  0x000001, 0x000001, 0xcfc532, 0xfff200, 0xfff200, 0x000001,	0x0,
		0x000001, 0xfff200, 0xfff200, 0xfff200, 0xfff200, 0x000001, 0x0,	0x0,
		0x0,	  0x000001, 0x000001, 0xfff200, 0x000001, 0x0,	    0x0,	0x0,
		0x0,	  0x0,	    0x0,      0x000001, 0x0,	  0x0,	    0x0,	0x0
	
	heart_sprite:	.word # 0x0=none, 0xf44236=red, 0xffffff=white
		0x0, 	  0xf44236, 0x0,      0xf44236,	0x0,
		0xf44236, 0xf44236, 0xf44236, 0xffffff,	0xf44236,
		0x0, 	  0xf44236, 0xf44236, 0xf44236,	0x0,
		0x0,	  0x0,	    0xf44236, 0x0,	0x0
		
	invis_sprite:	.word # 0x0=none, 0xffffff=white, 0x000001=black, 0xc62828=red
		0x0, 	  0xffffff, 0xffffff, 0x0,
		0xffffff, 0x000001, 0xffffff, 0x000001,
		0xffffff, 0xffffff, 0xffffff, 0xffffff,
		0xffffff, 0xffffff, 0xc62828, 0xffffff,	
		0xffffff, 0x0,	    0x0,      0xffffff
	
	
	
.text
.globl main

######################################################################
main: 		j game_loop
game_over: 
	jal draw_game_over_screen
	jal draw_buffer_to_gp 		# Double buffering
game_over_loop:
	lw $t9, 0xffff0000 		# Detect press
	bne $t9, 1, game_over_loop 	# No keypress detected
	
	lw $t9, 0xffff0004		# Get keycode
	beq $t9, 0x72, reset_game 	# Lowercase r
	beq $t9, 0x52, reset_game	# Uppercase R
	j game_over_loop

update:	
	jal sleep
	jal increase_score

	li $a0, -1
	jal update_invis	# Decrement invis
	
	jal repaint
game_loop:
	lw $t9, 0xffff0000 # Get keypress
	beq $t9, 1, KEY_PRESSED
	j update
	
######################################################################
# Helpers
return: jr $ra

random: # Parameters: $a0 = max
	# Returns:    $a0 = random integer in range [min, max]
	move $a1, $a0 	# $a1 = $a0
	li $v0, 42 	# Random integer in given range
	li $a0, 0  	# Pseudo-random number generator id
	syscall
	j return

######################################################################
# Reset
reset_game: # Reset memory to default values (including player_level, player_hearts). Then, start game
	lw $t0, init_player_level
	sw $t0, player_level
	
	lw $t0, init_player_hearts
	sw $t0, player_hearts
	
	lw $t0, init_player_invis
	sw $t0, player_invis
	
	jal reset
	j game_loop
reset:	# Reset memory to default values (excluding player_level, player_hearts)
	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	
	lw $t0, init_player_pos
	sw $t0, player_pos
	lw $t0, init_player_pos+4
	sw $t0, player_pos+4
	
	lw $t0, init_player_speed
	sw $t0, player_speed
	
	lw $t0, init_player_score
	sw $t0, player_score
	
	jal reset_car1_pos
	jal reset_car2_pos
	jal reset_banana_pos
	jal reset_heart_pos
	jal reset_invis_pos
	
	lw $ra, 0($sp)   	# pop old $ra 
 	addi $sp, $sp, 4 	# adjust stack pointer
	j return
	
reset_car1_pos:
	lw $t0, init_car1_pos
	sw $t0, car1_pos
	lw $t0, init_car1_pos+4
	sw $t0, car1_pos+4
	j return
reset_car2_pos:
	lw $t0, init_car2_pos
	sw $t0, car2_pos
	lw $t0, init_car2_pos+4
	sw $t0, car2_pos+4
	j return
reset_banana_pos:
	lw $t0, init_banana_pos
	sw $t0, banana_pos
	lw $t0, init_banana_pos+4
	sw $t0, banana_pos+4
	j return
reset_heart_pos:
	lw $t0, init_heart_pos
	sw $t0, heart_pos
	lw $t0, init_heart_pos+4
	sw $t0, heart_pos+4
	j return
reset_invis_pos:
	lw $t0, init_invis_pos
	sw $t0, invis_pos
	lw $t0, init_invis_pos+4
	sw $t0, invis_pos+4
	j return	

######################################################################
# Sleep
sleep: # Refresh sleep
	li $v0, 32
	lw $a0, player_speed
	beq $a0, SPEED_LOW, sleep_speed_low
	beq $a0, SPEED_MEDIUM, sleep_speed_medium
	beq $a0, SPEED_HIGH, sleep_speed_high
sleep_speed_low:    # SLEEP_LOW
	li $a0, SLEEP_LOW
	j sleep_end
sleep_speed_medium: # SLEEP_MEDIUM
	li $a0, SLEEP_MEDIUM
	j sleep_end
sleep_speed_high:   # SLEEP_HIGH
	li $a0, SLEEP_HIGH
	j sleep_end
sleep_end:	
	syscall
	j return

######################################################################
# Drawing
repaint:
	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	
	jal draw_road # Draw road
	
	# Draw player car
	# Player invisbility (flicker player)
	lw $t1, player_invis
	div $t1, $t1, 5
	mflo $t1
	li $t2, 2
	div $t1, $t2
	mfhi $t1
	bnez $t1, repaint_skip_player
	
	lw $a0, player_pos
	lw $a1, player_pos + 4
	li $a2, PLAYER_WIDTH
	li $a3, PLAYER_HEIGHT
	addi $sp, $sp, -4
	la $t0, player_sprite
	sw $t0, 0($sp) # Store player_sprite address onto stack
	jal draw_sprite
	repaint_skip_player:
	
	# Generate obstacles/powerups
	li $a0, 200
	jal random # $a0 = random integer in [0,99] to determine which obstacle to draw
	li $t3, ROAD_END_Y
	subi $t3, $t3, ROAD_START_Y # $t3 = ROAD_END_Y - ROAD_START_Y = ROAD_HEIGHT
	blt $a0, 15, generate_left_obstacle 	# 7.5%
	blt $a0, 30, generate_right_obstacle 	# 7.5%
	blt $a0, 35, generate_banana_obstacle 	# 2.5%
	beq $a0, 199, generate_heart_powerup 	# 0.25%
	beq $a0, 197, generate_invis_powerup 	# 0.25%
	j draw_obstacles_and_powerups # Skip generation
	
	generate_left_obstacle: # Generate obstacle in left lane
		lw $t2, car1_pos + 4
		beq $t2, -CAR_HEIGHT, reset_left_car # Left car does not exist when y = -CAR_HEIGHT
		bgt $t2, $t3, reset_left_car # Left car does not exist when y > ROAD_HEIGHT
		j draw_obstacles_and_powerups
		reset_left_car: # Generate random x-coordinate for left lane car
			li $a0, 15
			subi $a0, $a0, CAR_WIDTH
			jal random 		# $a0 = random x-coordinate integer in [0,16-CAR_WIDTH]
			sw $a0, car1_pos 	# Update car1_pos.x
			li $t2, -CAR_HEIGHT
			addi $t2, $t2, 1
			sw $t2, car1_pos + 4	# Update car1_pos.y
		j draw_obstacles_and_powerups

	generate_right_obstacle: # Generate obstacle in right lane
		lw $t2, car2_pos + 4
		beq $t2, -CAR_HEIGHT, reset_right_car # Car does not exist when y = -CAR_HEIGHT
		bgt $t2, $t3, reset_right_car # Car does not exist when y > ROAD_HEIGHT
		j draw_obstacles_and_powerups
		reset_right_car: # Generate random x-coordinate for right lane car
			li $a0, 15
			subi $a0, $a0, CAR_WIDTH
			jal random 		# $a0 = random x-coordinate integer in [0,16-CAR_WIDTH]
			addi $a0, $a0, 16 	# Move to right lanes
		
			sw $a0, car2_pos 	# Update car1_pos.x
			li $t2, -CAR_HEIGHT
			addi $t2, $t2, 1
			sw $t2, car2_pos + 4	# Update car2_pos.y
		j draw_obstacles_and_powerups
	
	generate_banana_obstacle: # Generate banana obstacle in either left or right lane
		lw $t2, player_level
		bne $t2, LEVEL_TWO, draw_obstacles_and_powerups # Banana is only for level 2
		
		lw $t2, banana_pos + 4
		beq $t2, -BANANA_HEIGHT, reset_banana 	# Banana does not exist when y = -CAR_HEIGHT
		bgt $t2, $t3, reset_banana 	# Banana does not exist when y > ROAD_HEIGHT
		j draw_obstacles_and_powerups
		reset_banana: # Generate random x-coordinate for banana
			li $a0, ROAD_END_X
			subi $a0, $a0, ROAD_START_X
			subi $a0, $a0, BANANA_WIDTH
			jal random 		# $a0 = random x-coordinate integer in [0,ROAD_END_X-BANANA_WIDTH]
		
			sw $a0, banana_pos	# Update banana_pos.x
			li $t2, -BANANA_HEIGHT
			addi $t2, $t2, 1
			sw $t2, banana_pos + 4	# Update banana_pos.y
		j draw_obstacles_and_powerups
	
	generate_heart_powerup: # Generate heart powerup in either left or right lane
		lw $t2, heart_pos + 4
		beq $t2, -HEART_HEIGHT, reset_heart # Heart does not exist when y = -HEART_HEIGHT
		bgt $t2, $t3, reset_heart    # Heart does not exist when y > ROAD_HEIGHT
		j draw_obstacles_and_powerups
		reset_heart: # Generate random x-coordinate for heart
			li $a0, ROAD_END_X
			subi $a0, $a0, ROAD_START_X
			subi $a0, $a0, HEART_WIDTH
			jal random 		# $a0 = random x-coordinate integer in [0,ROAD_END_X-HEART_WIDTH]
		
			sw $a0, heart_pos	# Update heart_pos.x
			li $t2, -HEART_HEIGHT
			addi $t2, $t2, 1
			sw $t2, heart_pos + 4	# Update heart_pos.y
		j draw_obstacles_and_powerups	
	
	generate_invis_powerup: # Generate invis powerup in either left or right lane
		lw $t2, invis_pos + 4
		beq $t2, -INVIS_HEIGHT, reset_invis # Invis does not exist when y = -INVIS_HEIGHT
		bgt $t2, $t3, reset_invis    # Invis does not exist when y > HEIGHT
		j draw_obstacles_and_powerups
		reset_invis: # Generate random x-coordinate for invis
			li $a0, ROAD_END_X
			subi $a0, $a0, ROAD_START_X
			subi $a0, $a0, INVIS_WIDTH
			jal random 		# $a0 = random x-coordinate integer in [0,ROAD_END_X-INVIS_WIDTH]
		
			sw $a0, invis_pos	# Update invis_pos.x
			li $t2, -INVIS_HEIGHT
			addi $t2, $t2, 1
			sw $t2, invis_pos + 4	# Update invis_pos.y
		j draw_obstacles_and_powerups	
	
	# Draw obstacles & powerups
	draw_obstacles_and_powerups:
	draw_left_car:
		lw $t2, car1_pos + 4
		beq $t2, -CAR_HEIGHT, draw_left_car_end
		addi $t2, $t2, 2 # Update car1_pos.y two pixels down (simulate relative velocity in opposite direction)
		sw $t2, car1_pos + 4

		lw $a0, car1_pos
		lw $a1, car1_pos + 4
		li $a2, CAR_WIDTH
		li $a3, CAR_HEIGHT
		addi $sp, $sp, -4
		la $t0, car_down_sprite
		sw $t0, 0($sp) # Store car_down_sprite address ontop stack
		jal draw_sprite
		
		beqz $a0, draw_left_car_end # Collision check
		jal collision_obstacle
	draw_left_car_end:
	
	draw_right_car:	
		lw $t2, car2_pos + 4
		beq $t2, -CAR_HEIGHT, draw_right_car_end
		addi $t2, $t2, 1 # Update car2_pos.y one pixel down
		sw $t2, car2_pos + 4
		
		lw $a0, car2_pos
		lw $a1, car2_pos + 4
		li $a2, CAR_WIDTH
		li $a3, CAR_HEIGHT
		addi $sp, $sp, -4
		la $t0, car_up_sprite
		sw $t0, 0($sp) # Store car_up_sprite address ontop stack
		jal draw_sprite
		
		beqz $a0, draw_right_car_end # Collision check
		jal collision_obstacle
	draw_right_car_end:
	
	draw_banana:	
		lw $t2, banana_pos + 4
		beq $t2, -BANANA_HEIGHT, draw_banana_end
		addi $t2, $t2, 1 # Update banana_pos.y one pixel down
		sw $t2, banana_pos + 4
		
		lw $a0, banana_pos
		lw $a1, banana_pos + 4
		li $a2, BANANA_WIDTH
		li $a3, BANANA_HEIGHT
		addi $sp, $sp, -4
		la $t0, banana_sprite
		sw $t0, 0($sp) # Store banana_sprite address ontop stack
		jal draw_sprite
		
		beqz $a0, draw_banana_end # Collision check
		jal collision_obstacle
	draw_banana_end:
	
	draw_heart:	
		lw $t2, heart_pos + 4
		beq $t2, -HEART_HEIGHT, draw_heart_end
		addi $t2, $t2, 1 # Update heart_pos.y one pixel down
		sw $t2, heart_pos + 4
		
		lw $a0, heart_pos
		lw $a1, heart_pos + 4
		li $a2, HEART_WIDTH
		li $a3, HEART_HEIGHT
		addi $sp, $sp, -4
		la $t0, heart_sprite
		sw $t0, 0($sp) # Store heart_sprite address ontop stack
		jal draw_sprite

		beqz $a0, draw_heart_end # Collision check
		jal collision_heart
	draw_heart_end:
	
	draw_invis:	
		lw $t2, invis_pos + 4
		beq $t2, -INVIS_HEIGHT, draw_invis_end
		addi $t2, $t2, 1 # Update invis_pos.y one pixel down
		sw $t2, invis_pos + 4
		
		lw $a0, invis_pos
		lw $a1, invis_pos + 4
		li $a2, INVIS_WIDTH
		li $a3, INVIS_HEIGHT
		addi $sp, $sp, -4
		la $t0, invis_sprite
		sw $t0, 0($sp) # Store invis_sprite address ontop stack
		jal draw_sprite
		
		beqz $a0, draw_invis_end # Collision check
		jal collision_invis
	draw_invis_end:
	
	jal draw_scoreboard 	# Draw scoreboard
	jal draw_buffer_to_gp 	# Double buffering
	
	lw $ra, 0($sp)   	# pop old $ra 
 	addi $sp, $sp, 4 	# adjust stack pointer
	j return

# Double buffering
draw_buffer_to_gp:
	lw $t0, displayAddress 		# First display pixel
	lw $t1, displayAddressEnd 	# Last display pixel
	la $t2, bufferDisplay
draw_buffer_to_gp_loop:
	bgt $t0, $t1, return 	# $t0 pointing outside canvas
	lw $t3, 0($t2)	 	# Get pixel to paint
	sw $t3, 0($t0) 	 	# Paint pixel
	addi $t0, $t0, 4 	# Next pixel to paint in
	addi $t2, $t2, 4 	# Next pixel colour
	j draw_buffer_to_gp_loop

# Draw full screen asset
draw_full_display: # Parameters: $a0 = asset_to_draw, $a1 = offset
	la $t0, bufferDisplay 			# First display pixel
	la $t1, bufferDisplay+DISPLAY_BYTES 	# Last display pixel
	move $t2, $a0				# Load asset_to_draw into $t2
	add $t2, $t2, $a1			# Offset asset_to_draw by offset
draw_full_display_loop:
	bgt $t0, $t1, return 	# $t0 pointing outside canvas
	lw $t3, 0($t2)	 	# Get pixel to paint
	sw $t3, 0($t0) 	 	# Paint pixel
	addi $t0, $t0, 4 	# Next pixel to paint in
	addi $t2, $t2, 4 	# Next pixel colour
	j draw_full_display_loop

# Draw game over screen
draw_game_over_screen:
	la $a0, game_over_screen
 	move $a1, $zero
 	j draw_full_display

# Draw road
draw_road:
	# Dashed line offset
	lw $t0, road_state
	sll $t0, $t0, 7 	# t0 = road_state * 128
	li $t1, 640
	sub $t0, $t1, $t0 	# $t0 = (128*5) - (road_state*128) 
	
	sw $ra, -4($sp) 	# push $ra onto stack 
	sw $t0, -8($sp) 	# push $t0 onto stack 
	addi $sp, $sp, -8	# adjust stack pointer
	
	jal update_road_state 	# Update road_state
	
	lw $t3, 0($sp)   	# pop $t0 into $t3
	lw $ra, 4($sp)   	# pop old $ra 
 	addi $sp, $sp, 8 	# adjust stack pointer
 	
 	la $a0, road
 	move $a1, $t3
 	j draw_full_display

# Draw scoreboard (score & hearts)
draw_scoreboard:
	la $t0, bufferDisplay 			# First display pixel
	la $t1, bufferDisplay+DISPLAY_BYTES	# Last display pixel
	la $t2, scoreboard			# Load score into $t2
	move $t4, $zero				# Index variable
	
	li $t5, SCOREBOARD_WIDTH
	mul $t5, $t5, SCOREBOARD_HEIGHT
	mflo $t5				# $t5 = SCOREBOARD_WIDTH * SCOREBOARD_HEIGHT
	
	# Score iterator (load score multiplied by (SCOREBOARD_WIDTH-2) / MAX_PLAYER_SCORE)
	lw $t6, player_score
	li $t7, SCOREBOARD_WIDTH # Temporarily use $t7
	subi $t7, $t7, 2
	mult $t6, $t7
	mflo $t6
	div $t6, $t6, MAX_PLAYER_SCORE
	mflo $t6 # $t6 = (player_score*(SCOREBOARD_WIDTH-2)) // MAX_PLAYER_SCORE
	
	# Heart iterator
	lw $t7, player_hearts # $s1 = # of player hearts
draw_scoreboard_loop:
	bgt $t0, $t1, return 	# $t0 pointing outside canvas
	bge $t4, $t5, return	# Finished drawing score
	lw $t3, 0($t2)	 	# Get pixel to paint
	
	draw_scoreboard_loop_score:
		bne $t3, 0xffffff, draw_scoreboard_loop_hearts 	# Check if current pixel is white/empty score
		blez $t6, draw_scoreboard_loop_hearts 		# Check if score iterator is complete
		
		# Show different score colour for different levels
		la $s0, score_colour
		lw $s1, player_level
		subi $s1, $s1, 1
		sll $s1, $s1, 2
		add $s0, $s0, $s1 
		
		lw $t3, 0($s0)	 # Set pixel to paint as score_colour
		subi $t6, $t6, 1 # Decrement score iterator
	draw_scoreboard_loop_hearts:
		# Check if last row of scoreboard
		div $s0, $t4, SCOREBOARD_WIDTH # $s0 = index // SCOREBOARD_WIDTH
		li $s1, SCOREBOARD_HEIGHT
		subi $s1, $s1, 1
		bne $s0, $s1, draw_scoreboard_loop_end
		
		# Check if even pixel in last row
		div $s0, $t4, 2
		mfhi $s0 # $s0 = $t4 % 2
		beqz $s0, draw_scoreboard_loop_end
		
		blez $t7, draw_scoreboard_loop_end 	# Check if heart iterator is complete
		lw $t3, heart_colour			# Set pixel to paint as heart_colour
		subi $t7, $t7, 1			# Decrement heart iterator
	draw_scoreboard_loop_end:
		sw $t3, 0($t0) 	 	# Paint pixel
		addi $t0, $t0, 4 	# Next pixel to paint in
		addi $t2, $t2, 4 	# Next pixel colour
		addi $t4, $t4, 1	# Increment index
		j draw_scoreboard_loop
	
# Draw sprite
draw_sprite: # Parameters: $a0 = x, $a1 = y, $a2 = width, $a3 = height
	     # Stack: sprite_to_draw
	     # Returns: $a0 = 0/1 if player collides with sprite
	# Check if sprite collides with player (ignoring clear pixels)
	lw $s0, player_pos		# $s0 = player_pos.x1
	lw $s1, player_pos + 4		# $s1 = player_pos.y1
	addi $s2, $s0, PLAYER_WIDTH	# $s2 = player_pos.x2
	subi $s2, $s2, 1
	addi $s3, $s1, PLAYER_HEIGHT	# $s3 = player_pos.y2
	subi $s3, $s3, 1
	
	add $s4, $a0, $a2		# $s4 = sprite_pos.x2 
	subi $s4, $s4, 1
	add $s5, $a1, $a3		# $s5 = sprite_pos.y2
	subi $s5, $s5, 1
	
	# $s6 = 4 if player collides with sprite (ignoring clear pixels)
	sle $s6, $s0, $s4 # $s6 = player_pos.x1 <= sprite_pos.x2
	sge $s7, $s2, $a0 # $s7 = player_pos.x2 >= sprite_pos.x1
	sle $t8, $s1, $s5 # $t8 = player_pos.y1 <= sprite_pos.y2
	sge $t9, $s3, $a1 # $t9 = player_pos.y2 >= sprite_pos.y1
	add $s6, $s6, $s7
	add $s6, $s6, $t8
	add $s6, $s6, $t9
	
	# Store $a0-$a3 in $s0-$s3
	move $s0, $a0
	move $s1, $a1
	move $s2, $a2
	move $s3, $a3
	
	li $a0, 0 # Player collision return value
	bne $s6, 4, no_sprite_collision
	li $a0, 1
	
	no_sprite_collision:
	
	# Set $t0 to initial sprite pixel (ie. top left)
	addi $s1, $s1, ROAD_START_Y	# $s1 = ROAD_START_Y+y
	sll $s1, $s1, 5			# $s1 = 32(ROAD_START_Y+y)
	add $s1, $s1, $s0 		# $s1 = 32(ROAD_START_Y+y) + x
	addi $s1, $s1, ROAD_START_X 	# $s1 = 32(ROAD_START_Y+y) + (ROAD_START_X+x)
	sll $s1, $s1, 2			# $s1 = 4 * (32(ROAD_START_Y+y)) + (ROAD_START_X+x))
	
	la $t0, bufferDisplay 			# First display pixel
#	lw $t0, displayAddress
	add $t0, $t0, $s1	  		# First display pixel of sprite
	la $t1, bufferDisplay+DISPLAY_BYTES	# Last display pixel
#	lw $t1, displayAddressEnd
	
	# Offset to go from right edge to next line
	li $t2, DISPLAY_WIDTH
	addi $t2, $t2, 1 	# $t2 = DISPLAY_WIDTH+1
	sub $t2, $t2, $s2	# $t2 = (DISPLAY_WIDTH+1)-width
	sll $t2, $t2, 2		# $t2 = ((DISPLAY_WIDTH+1)-width)*4

	lw $t3, 0($sp)		# Load sprite_to_draw into $t3 from stack
 	addi $sp, $sp, 4 	# adjust stack pointer
	move $t4, $zero 	# Index variable
draw_sprite_loop:
	mult $s2, $s3
	mflo $t6		# $t6=width*height
	beq $t4, $t6, return 	# Painted all pixels
	bgt $t0, $t1, return	# $t0 pointing outside canvas
	 
	lw $t5, 0($t3) 	 	# Get pixel to paint	
	
	addi $t3, $t3, 4 	# Next sprite pixel
	addi $t4, $t4, 1 	# Increment index
	
	beqz $t5, draw_sprite_loop_end 	# Skip pixel if 0x0
	sw $t5, 0($t0)			# Paint pixel
	draw_sprite_loop_end:	
		# Move to next line if current pixel is last in row
		div $t4, $s2
		mfhi $t6
		beqz $t6, update_next_line
	
		addi $t0, $t0, 4 # Next pixel to paint in
		j draw_sprite_loop
update_next_line:
	add $t0, $t0, $t2
	j draw_sprite_loop
	
######################################################################
# Movement
update_player_pos: # Parameters: $a0 = x
	move $t0, $a0 # Store $t0 = $a0 = x
	bltz $t0, collision_obstacle # Left wall collision check
	
	# Right wall collision check
	li $t1, ROAD_END_X
	subi $t1, $t1, ROAD_START_X
	subi $t1, $t1, PLAYER_WIDTH
	bge $t0, $t1, collision_obstacle
	
	sw $t0, player_pos  # Update player x-coordinate
	j return
	
increase_speed:
	lw $t0, player_speed
	bge $t0, SPEED_HIGH, return # Max speed check
	
	addi $t0, $t0, 1
	sw $t0, player_speed
	j return
decrease_speed:
	lw $t0, player_speed
	ble $t0, SPEED_LOW, return # Min speed check
	
	addi $t0, $t0, -1
	sw $t0, player_speed
	j return

update_road_state:
	lw $t0, road_state
	blt $t0, MAX_ROAD_STATE, increment_road_state # Max road_state check
	li $t0, -1 # Reset road_state
	increment_road_state:
		addi $t0, $t0, 1
		sw $t0, road_state	
		j return

######################################################################
# Collision
collision_obstacle:
	lw $t0, player_invis
	bnez $t0, return # Player is invisible; allowed to drive through obstacles

	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	jal reset
	lw $ra, 0($sp)   	# pop old $ra 
	addi $sp, $sp, 4 	# adjust stack pointer
	
	# Decrement hearts by 1
	li $a0, -1
	j update_hearts

# Powerup collisions
collision_heart:
	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	jal reset_heart_pos
	lw $ra, 0($sp)   	# pop old $ra 
 	addi $sp, $sp, 4 	# adjust stack pointer
	
	# Increment hearts by 1
	li $a0, 1
	j update_hearts
collision_invis:
	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	jal reset_invis_pos
	lw $ra, 0($sp)   	# pop old $ra 
 	addi $sp, $sp, 4 	# adjust stack pointer
	
	# Increment invis by MAX_PLAYER_INVIS
	li $a0, MAX_PLAYER_INVIS
	j update_invis

######################################################################
# Scoreboard (score & hearts)	
# Score
reset_score:
	sw $zero, player_score
	j return
increase_score:
	lw $t0, player_score
	bge $t0, MAX_PLAYER_SCORE, next_level # Check if player_score >= MAX_PLAYER_SCORE
	addi $t0, $t0, 1
	sw $t0, player_score
	j return
next_level: 
	# Sleep for 2.5s
	li $v0, 32
	li $a0, 2500
	syscall

	lw $t0, player_level
	bge $t0, MAX_LEVEL, game_over # Check if player_level >= MAX_LEVEL
	addi $t0, $t0, 1
	sw $t0, player_level
	
	sw $ra, -4($sp) 	# push $ra onto stack
	addi $sp, $sp, -4	# update $ra
	jal reset
	lw $ra, 0($sp)   	# pop old $ra 
 	addi $sp, $sp, 4 	# adjust stack pointer
	
	j reset_score
	
# Hearts
update_hearts: # Parameters: $a0 = # of hearts to increment current player_hearts by
	lw $t0, player_hearts
	add $t0, $t0, $a0
	bgt $t0, MAX_PLAYER_HEARTS, return 	# Check if new hearts is greater than MAX_PLAYER_HEARTS
	blez $t0, game_over			# Check if new hearts is negative (send to game over)
	sw $t0, player_hearts
	j return
	
# Invisibility timer
update_invis: # Parameters: $a0 = # of invis ticks to increment current player_invis by
	lw $t0, player_invis
	add $t0, $t0, $a0
	
	# Max invis timer check
	li $a0, MAX_PLAYER_INVIS
	bgt $t0, MAX_PLAYER_INVIS, set_invis 	# Check if new invis timer is greater than MAX_PLAYER_INVIS
	
	# Min invis timer check
	li $a0, 0
	bltz $t0, set_invis			# Check if new invis timer is negative
	
	move $a0, $t0
set_invis: # Parameters: $a0 = new player_invis
	sw $a0, player_invis
	j return

######################################################################
# Keyboard input
KEY_PRESSED: # Keyboard input
	lw $t9, 0xffff0004 # Get keycode
	
	beq $t9, 0x77, keycode_w # Lowercase
	beq $t9, 0x57, keycode_w # Uppercase

	beq $t9, 0x61, keycode_a 
	beq $t9, 0x41, keycode_a 
	
	beq $t9, 0x73, keycode_s
	beq $t9, 0x53, keycode_s
	
	beq $t9, 0x64, keycode_d
	beq $t9, 0x44, keycode_d
	
	beq $t9, 0x71, keycode_q
	beq $t9, 0x51, keycode_q
	
	j update

keycode_w: # Increase speed
	jal increase_speed
	j update
keycode_a: # Move left
	lw $a0, player_pos
	addi $a0, $a0, -1
	jal update_player_pos
	j update
keycode_s: # Decrease speed
	jal decrease_speed
	j update
keycode_d: # Move right
	lw $a0, player_pos
	addi $a0, $a0, 1
	jal update_player_pos
	j update

keycode_q: # Start/restart game
	j game_over
	
######################################################################																
Exit:
	li $v0, 10 # terminate the program
	syscall 
